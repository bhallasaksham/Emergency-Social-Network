/* eslint-disable no-undef */

let allUsers = [];

// eslint-disable-next-line no-unused-vars
const clearESNDirectory = () => {
  document.getElementById('directoryTable').innerHTML = '';
  document.getElementById('no-data').style.display = 'none';
};

const callGetUsersAPI = async (url) => {
  const token = getCookie('token');
  await axios
    .get(url, {
      headers: {
        Authorization: token,
      },
    })
    .then((result) => {
      // data gets all users in json format
      const {data} = result.data;
      if (data.length === 0) {
        showNoDataRetrievedText();
        return;
      }
      //sort data by username, use callback function, which takes as parameters 2 objects contained in the array (which we call a and b)
      allUsers = data;
      displayUsers(allUsers);
    })
    .catch((err) => {
      alert(err.response.data.message);
    });
};

// eslint-disable-next-line no-unused-vars
const getUsersByUsername = (keyword) => {
  let url = `${API_URL}/users?username=${keyword.toLowerCase()}`;
  const userType = getCookie('userType');

  if (userType != 'administrator') {
    url = url + '?account_status=active';
  }
  callGetUsersAPI(url);
};

// eslint-disable-next-line no-unused-vars
const getUsersByStatus = (keyword) => {
  let url = `${API_URL}/users?status=${keyword.toLowerCase()}`;
  const userType = getCookie('userType');

  if (userType != 'administrator') {
    url = url + '?account_status=active';
  }
  callGetUsersAPI(url);
};

const displayUsers = (users) => {
  users.sort((a, b) => (a.username > b.username ? 1 : -1));
  const onlineusers = users.filter(({online}) => online === true);
  const offlineusers = users.filter(({online}) => online === false);
  let tableContent =
    '<tr><th class="username"> Username </th><th class="online"> Online </th><th class="status"> Status </th><tr>';
  for (index = 0; index < onlineusers.length; index++) {
    username = onlineusers[index]['username'];
    online = onlineusers[index]['online'];
    sharestatus = onlineusers[index]['status'];
    tableContent +=
      `<tr id="${onlineusers[index]['username']}" onclick="onClickTableRow(this)"><td>` +
      username +
      '</td><td><span class="online">&nbsp;&nbsp;&nbsp;&nbsp;Online</span></td>';
    tableContent += displayStatus(sharestatus);
  }
  for (index = 0; index < offlineusers.length; index++) {
    username = offlineusers[index]['username'];
    online = offlineusers[index]['online'];
    sharestatus = offlineusers[index]['status'];
    tableContent +=
      `<tr id="${offlineusers[index]['username']}" onclick="onClickTableRow(this)"><td>` +
      username +
      '</td><td><span class="offline">&nbsp;&nbsp;&nbsp;&nbsp;Offline</span></td>';
    tableContent += displayStatus(sharestatus);
  }
  document.getElementById('directoryTable').innerHTML = tableContent;
};

// eslint-disable-next-line no-unused-vars
const onClickTableRow = (row) => {
  const username = getCookie('currentUser');
  if (row.id === username) {
    alert(
      "There should be at least one active administrator in the system, you can't update yourself!",
    );
    return;
  }
  const userType = getCookie('userType');
  if (userType === 'administrator' && row.id !== username) {
    window.location.replace(`/user-profile?username=${row.id}`);
  }
};

socket.on('update-online-status', (msg) => {
  //check if username in the original table
  const found = allUsers.find((user) => user.username === msg.username);
  if (found) {
    found['online'] = msg.online;
  } else {
    allUsers.push({
      username: msg.username,
      online: msg.online,
      status: 'Undefined',
    });
  }
  displayUsers(allUsers);
});

socket.on('share-status', (msg) => {
  // check if username in the original table or not
  const found = allUsers.find((user) => user.username === msg.username);
  if (found) {
    found['status'] = msg.status;
  }
  displayUsers(allUsers);
});

// handle account-status event generated by administrator update user profile
socket.on('account-status', (msg) => {
  const userType = getCookie('userType');

  // if currentUser is not admin, then remove inactive user from ESN Directory
  if (userType !== 'administrator' && msg.account_status == 'inactive') {
    const found = allUsers.find(
      (user) =>
        msg.username == user.username ||
        (msg.original_username && msg.original_username == user.username),
    );

    if (found) {
      // remove table row by found.username & allUsers array
      const table = document.getElementById('directoryTable');
      const row = document.getElementById(found.username);
      table.deleteRow(row.rowIndex);
      allUsers = allUsers.filter((e) => e !== found);
    }
  }

  // if currentUser is not admin, then add active user from ESN Directory if not exist
  if (userType !== 'administrator' && msg.account_status == 'active') {
    const found = allUsers.find((user) => user.username === msg.username);
    if (!found) {
      allUsers.push({
        username: msg.username,
        online: false,
        status: msg.status,
      });
      displayUsers(allUsers);
    }
  }
});

const showCanUpdateUserNoteOnUI = () => {
  const updateDataText = document.getElementById('update-users');
  updateDataText.style.display = 'block';
  updateDataText.innerText =
    'Please click on username to update user information';
};

// get users for ESN directory
(async () => {
  let url = `${API_URL}/users`;
  const userType = getCookie('userType');
  if (userType !== 'administrator') {
    url = url + '?account_status=active';
  }

  if (userType === 'administrator') {
    showCanUpdateUserNoteOnUI();
  }
  await callGetUsersAPI(url);
})();
